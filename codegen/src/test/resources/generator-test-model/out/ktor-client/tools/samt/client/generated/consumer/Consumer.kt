@file:Suppress("RemoveRedundantQualifierName", "unused", "UnusedImport", "LocalVariableName", "FunctionName", "ConvertTwoComparisonsToRangeCheck", "ReplaceSizeCheckWithIsNotEmpty", "NAME_SHADOWING", "UNUSED_VARIABLE", "NestedLambdaShadowedImplicitParameter", "KotlinRedundantDiagnosticSuppress")

/*
 * This file is generated by SAMT, manual changes will be overwritten.
 * Visit the SAMT GitHub for more details: https://github.com/samtkit/core
 */

package tools.samt.client.generated.consumer

import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.contentnegotiation.*
import io.ktor.client.request.*
import io.ktor.client.statement.*
import io.ktor.http.*
import io.ktor.serialization.kotlinx.json.*
import io.ktor.util.*
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.json.*
import kotlinx.coroutines.*

class GreeterEndpointImpl(private val baseUrl: String) : tools.samt.client.generated.greeter.Greeter {
    private val client = HttpClient(CIO) {
        install(ContentNegotiation) {
            json()
        }
    }

    /** Used to launch oneway operations asynchronously */
    private val onewayScope = CoroutineScope(Dispatchers.IO)

    override fun greet(id: tools.samt.client.generated.greeter.ID, name: String, type: tools.samt.client.generated.greeter.GreetingType?): tools.samt.client.generated.greeter.Greeting = runBlocking {
        // Make actual network call
        val `client response` = client.request(this@GreeterEndpointImpl.baseUrl) {
                url {
                    // Construct path and encode path parameters
                    appendPathSegments("greet", encodeSlash = true)
                    appendPathSegments(name, encodeSlash = true)

                    // Encode query parameters
                    this.parameters.append("type", (type?.let { type -> tools.samt.client.generated.greeter.`encode GreetingType`(type) } ?: JsonNull).toString())
                }
                contentType(ContentType.Application.Json)
                this.method = HttpMethod.Post
                header("id", id?.let { id -> tools.samt.client.generated.greeter.`encode ID`(id) } ?: JsonNull)
                setBody(
                    buildJsonObject {
                    }
                )
            }
        check(`client response`.status.isSuccess()) { "greet failed with status ${`client response`.status}" }
        val bodyAsText = `client response`.bodyAsText()
        val jsonElement = Json.parseToJsonElement(bodyAsText)

        tools.samt.client.generated.greeter.`decode Greeting`(jsonElement)
    }

    override fun greetAll(names: List<String?>): Map<String, tools.samt.client.generated.greeter.Greeting?> = runBlocking {
        // Make actual network call
        val `client response` = client.request(this@GreeterEndpointImpl.baseUrl) {
                url {
                    // Construct path and encode path parameters
                    appendPathSegments("greet", encodeSlash = true)
                    appendPathSegments("all", encodeSlash = true)

                    // Encode query parameters
                    this.parameters.append("names", (JsonArray(names.map { it?.let { it -> JsonPrimitive(it.also { require(it.codePointCount(0, it.length) >= 1 && it.codePointCount(0, it.length) <= 50) }) } ?: JsonNull })).toString())
                }
                contentType(ContentType.Application.Json)
                this.method = HttpMethod.Get
                setBody(
                    buildJsonObject {
                    }
                )
            }
        check(`client response`.status.isSuccess()) { "greetAll failed with status ${`client response`.status}" }
        val bodyAsText = `client response`.bodyAsText()
        val jsonElement = Json.parseToJsonElement(bodyAsText)

        jsonElement.jsonObject.mapValues { (_, value) -> value.takeUnless { it is JsonNull }?.let { value -> tools.samt.client.generated.greeter.`decode Greeting`(value) } }
    }

    override fun greeting(who: tools.samt.client.generated.greeter.Person): String = runBlocking {
        // Make actual network call
        val `client response` = client.request(this@GreeterEndpointImpl.baseUrl) {
                url {
                    // Construct path and encode path parameters
                    appendPathSegments("greeting", encodeSlash = true)

                    // Encode query parameters
                }
                contentType(ContentType.Application.Json)
                this.method = HttpMethod.Post
                setBody(
                    buildJsonObject {
                        put("who", tools.samt.client.generated.greeter.`encode Person`(who))
                    }
                )
            }
        check(`client response`.status.isSuccess()) { "greeting failed with status ${`client response`.status}" }
        val bodyAsText = `client response`.bodyAsText()
        val jsonElement = Json.parseToJsonElement(bodyAsText)

        jsonElement.jsonPrimitive.content.also { require(it.codePointCount(0, it.length) >= 1 && it.codePointCount(0, it.length) <= 100) }
    }

    override fun allTheTypes(long: Long, float: Float, double: Double, decimal: java.math.BigDecimal, boolean: Boolean, date: java.time.LocalDate, dateTime: java.time.LocalDateTime, duration: java.time.Duration): Unit = runBlocking {
        // Make actual network call
        val `client response` = client.request(this@GreeterEndpointImpl.baseUrl) {
                url {
                    // Construct path and encode path parameters
                    appendPathSegments("allTheTypes", encodeSlash = true)

                    // Encode query parameters
                }
                contentType(ContentType.Application.Json)
                this.method = HttpMethod.Post
                setBody(
                    buildJsonObject {
                        put("long", JsonPrimitive(long))
                        put("float", JsonPrimitive(float))
                        put("double", JsonPrimitive(double))
                        put("decimal", JsonPrimitive(decimal.toPlainString()))
                        put("boolean", JsonPrimitive(boolean))
                        put("date", JsonPrimitive(date.toString()))
                        put("dateTime", JsonPrimitive(dateTime.toString()))
                        put("duration", JsonPrimitive(duration.toString()))
                    }
                )
            }
        check(`client response`.status.isSuccess()) { "allTheTypes failed with status ${`client response`.status}" }
    }

    override fun fireAndForget(deleteWorld: Boolean): Unit {
        onewayScope.launch {
        // Make actual network call
        val `client response` = client.request(this@GreeterEndpointImpl.baseUrl) {
                url {
                    // Construct path and encode path parameters
                    appendPathSegments("world", encodeSlash = true)

                    // Encode query parameters
                }
                contentType(ContentType.Application.Json)
                this.method = HttpMethod.Put
                cookie("deleteWorld", (JsonPrimitive(deleteWorld.also { require(it == true)) })).toString())
                setBody(
                    buildJsonObject {
                    }
                )
            }
        check(`client response`.status.isSuccess()) { "fireAndForget failed with status ${`client response`.status}" }
        }
    }

    override suspend fun legacy(): Unit
        = error("Not used in SAMT consumer and therefore not generated")
}
