@file:Suppress("RemoveRedundantQualifierName", "unused", "UnusedImport", "LocalVariableName", "FunctionName", "ConvertTwoComparisonsToRangeCheck", "ReplaceSizeCheckWithIsNotEmpty", "NAME_SHADOWING", "UNUSED_VARIABLE", "NestedLambdaShadowedImplicitParameter", "KotlinRedundantDiagnosticSuppress")

/*
 * This file is generated by SAMT, manual changes will be overwritten.
 * Visit the SAMT GitHub for more details: https://github.com/samtkit/core
 */

package tools.samt.server.generated.greeter

import io.ktor.util.*
import kotlinx.serialization.json.*

/** Encode and validate record tools.samt.greeter.Greeting to JSON */
fun `encode Greeting`(record: tools.samt.server.generated.greeter.Greeting): JsonElement {
    // Encode field message
    val `field message` = run {
        val value = record.message
        JsonPrimitive(value.also { require(it.length <= 128) })
    }
    // Create JSON for tools.samt.greeter.Greeting
    return buildJsonObject {
        put("message", `field message`)
    }
}
/** Decode and validate record tools.samt.greeter.Greeting from JSON */
fun `decode Greeting`(json: JsonElement): tools.samt.server.generated.greeter.Greeting {
    // Decode field message
    val `field message` = run {
        val jsonElement = json.jsonObject["message"]!!
        jsonElement.jsonPrimitive.content.also { require(it.length <= 128) }
    }
    // Create record tools.samt.greeter.Greeting
    return tools.samt.server.generated.greeter.Greeting(
        message = `field message`,
    )
}

/** Encode and validate record tools.samt.greeter.Person to JSON */
fun `encode Person`(record: tools.samt.server.generated.greeter.Person): JsonElement {
    // Encode field id
    val `field id` = run {
        val value = record.id
        value?.let { value -> tools.samt.server.generated.greeter.`encode ID`(value) } ?: JsonNull
    }
    // Encode field name
    val `field name` = run {
        val value = record.name
        JsonPrimitive(value)
    }
    // Encode field age
    val `field age` = run {
        val value = record.age
        JsonPrimitive(value.also { require(it >= 1) })
    }
    // Create JSON for tools.samt.greeter.Person
    return buildJsonObject {
        put("id", `field id`)
        put("name", `field name`)
        put("age", `field age`)
    }
}
/** Decode and validate record tools.samt.greeter.Person from JSON */
fun `decode Person`(json: JsonElement): tools.samt.server.generated.greeter.Person {
    // Decode field id
    val `field id` = run {
        val jsonElement = json.jsonObject["id"] ?: JsonNull
        tools.samt.server.generated.greeter.`decode ID`(jsonElement)
    }
    // Decode field name
    val `field name` = run {
        val jsonElement = json.jsonObject["name"]!!
        jsonElement.jsonPrimitive.content
    }
    // Decode field age
    val `field age` = run {
        val jsonElement = json.jsonObject["age"]!!
        jsonElement.jsonPrimitive.int.also { require(it >= 1) }
    }
    // Create record tools.samt.greeter.Person
    return tools.samt.server.generated.greeter.Person(
        id = `field id`,
        name = `field name`,
        age = `field age`,
    )
}

/** Encode enum tools.samt.greeter.GreetingType to JSON */
fun `encode GreetingType`(value: tools.samt.server.generated.greeter.GreetingType?): JsonElement = when(value) {
    null -> JsonNull
    tools.samt.server.generated.greeter.GreetingType.HELLO -> JsonPrimitive("HELLO")
    tools.samt.server.generated.greeter.GreetingType.HI -> JsonPrimitive("HI")
    tools.samt.server.generated.greeter.GreetingType.HEY -> JsonPrimitive("HEY")
    tools.samt.server.generated.greeter.GreetingType.FAILED_TO_PARSE -> error("Cannot encode FAILED_TO_PARSE value")
}
/** Decode enum tools.samt.greeter.GreetingType from JSON */
fun `decode GreetingType`(json: JsonElement): tools.samt.server.generated.greeter.GreetingType = when(json.jsonPrimitive.content) {
    "HELLO" -> tools.samt.server.generated.greeter.GreetingType.HELLO
    "HI" -> tools.samt.server.generated.greeter.GreetingType.HI
    "HEY" -> tools.samt.server.generated.greeter.GreetingType.HEY
    // Value not found in enum tools.samt.greeter.GreetingType
    else -> tools.samt.server.generated.greeter.GreetingType.FAILED_TO_PARSE
}

/** Encode alias tools.samt.greeter.ID to JSON */
fun `encode ID`(value: tools.samt.server.generated.greeter.ID): JsonElement =
    value?.let { value -> JsonPrimitive(value.also { require(it.length >= 1 && it.length <= 50) }) } ?: JsonNull
/** Decode alias tools.samt.greeter.ID from JSON */
fun `decode ID`(json: JsonElement): String? {
    if (json is JsonNull) return null
    return json.jsonPrimitive.content.also { require(it.length >= 1 && it.length <= 50) }
}

